[{"path":"https://margotbligh.github.io/GlycoAnnotateR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Margot Bligh. Author, maintainer.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bligh M (2024). GlycoAnnotateR: Prediction Annotation Glycan Masses. R package version 0.0.0.9000, https://github.com/margotbligh/GlycoAnnotateR, https://margotbligh.github.io/GlycoAnnotateR/, https://margotbligh.github.io/GlycoAnnotateR.","code":"@Manual{,   title = {GlycoAnnotateR: Prediction and Annotation of Glycan Masses},   author = {Margot Bligh},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/margotbligh/GlycoAnnotateR, https://margotbligh.github.io/GlycoAnnotateR/},   url = {https://margotbligh.github.io/GlycoAnnotateR}, }"},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Prediction and Annotation of Glycan Masses","text":"GlycoAnnotateR R package data-base free annotation glycan compositions mass spectrometry data. package designed flexible work many different types mass spectrometry data (e.g. LC-MS, MALDI, direct injection), well output many different data processing pipelines (e.g. XMCS, Cardinal). currently consists two main functionalities: glycoPredict: function uses combinatorial mathematics ‘predict’ build every combination monomers modifications possible based input parameters. glycoAnnotate: function annotates mass spectrometry peaks features comparison predicted, theoretical compositions specified error allowed.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prediction and Annotation of Glycan Masses","text":"package can installed directly Github using devtools: Please note python required package function. local version python available, please follow instructions download install.","code":"library(devtools) devtools::install_github('margotbligh/GlycoAnnotateR')"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"prediction-parameters","dir":"","previous_headings":"","what":"Prediction parameters","title":"Prediction and Annotation of Glycan Masses","text":"‘prediction’ ‘calculation’ glycan compositions core utility package. Therefore detailed description arguments provided .","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"glycan-composition-parameters","dir":"","previous_headings":"Prediction parameters","what":"Glycan composition parameters","title":"Prediction and Annotation of Glycan Masses","text":"Degree polymerisation, dp always range lowest highest DP desired (e.g. c(1,10) DPs 1 10)- need single DP, provide DP twice (e.g. c(2,2) DP 2). pentose included addition hexose, pent_option logical argument whether pentose monomers included compositions addition hexose monomers. Maximum number modifications per monomer average, nmod_max Calculated number modifications number monomers. take account unsaturated, alditol dehydrated. example, tetramer (DP4) deoxyhexoses four sulphate groups, average number modifications per monomer 2. default nmod_max 1, maximum allowed value 3. Consider carefully whether need increase value default. Label, label sugars labelled reductive amination? Current supported labels none (default) givin table : Double sulphate, double_sulphate Can monomers disulphated? Logical option required. work sulphate must modifications nmod_max least 2. Glycan linkage, glycan_linkage default none. oglycan nglycan limits described Cooper et al. (2021) GlycoMod software implemented. Rules listed : https://web.expasy.org/glycomod/glycomod-doc.html Modification limits, modification_limits User provided limits monomers modifications. Provide named list. Modifications, modifications default, modification can occur per monomer, possible modifications selected present one monomer. calculation modified monomers filtered nmod_max term output returned. , example, modifications = c('deoxy', 'sulphate', 'carboxylicacid'), program generate one possible composition three modifications one monomer (.e. ‘DeoxyHex1 CarboxylicAcid1 Sulphate1’). nmod_max default 1, composition filtered output returned (nmod = 3). Sulphate modification allowed occur twice per mononer. , need set double_sulphate=TRUE nmod_max least 2. different modifications namings summarised :","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"mass-spec-parameters","dir":"","previous_headings":"Prediction parameters","what":"Mass spec parameters","title":"Prediction and Annotation of Glycan Masses","text":"Scan range, scan_range Scan range (m/z) used acquisition. prediction/computation purposes can set wide. Compositions adduct m/z value inside scan range filtered . Polarity, polarity Negative (neg) /positive (pos) ionisation polarity used acquisition. Changes adducts returned. See specific adducts generated. Ionisation type, ion_type ESI (ESI) /MALDI (MALDI) ionisation used. Changes adducts returned (MALDI singly charged ions, ESI can multiply charged). See specific adducts generated.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/index.html","id":"output-and-other-parameters","dir":"","previous_headings":"Prediction parameters","what":"Output and other parameters","title":"Prediction and Annotation of Glycan Masses","text":"Naming, naming compositions named? Options IUPAC, GlycoCT Oxford. compositions structures given, conventions followed closely, common abbreviations conventions used (see modifications table ). Adducts, adducts Options : H, Na, NH4, K, Cl CHOO. adducts generated depends adducts, polarity ion type. resulting adducts summarised table : __NB: n number anionic groups. relevant, ions generated n values 2-n. example, negative mode MALDI Na adducts, composition four sulphate groups (n = 4) adducts include [M-2H+1Na]-, [M-3H+2Na]- [M-4H+3Na]-.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate m/z values with glycan compositions based on theoretical values — glycoAnnotate","title":"Annotate m/z values with glycan compositions based on theoretical values — glycoAnnotate","text":"glycoAnnotate() annotates peaks features MS data, using either pre-generated table glycoPredict generating new table.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate m/z values with glycan compositions based on theoretical values — glycoAnnotate","text":"","code":"glycoAnnotate(   data,   mz_column = \"mz\",   mzmin_column = NULL,   mzmax_column = NULL,   pred_table = NULL,   param = NULL,   collapse = F,   collapse_columns = NULL,   error = 3,   error_units = \"ppm\" )"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotate.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Annotate m/z values with glycan compositions based on theoretical values — glycoAnnotate","text":"data Dataframe containing data annotated. example, feature dataframe XCMS pre-processing (LC-MS direct inject) features Cardinal (MALDI). mz_column Name column containing m/z values. mzmin_column OPTIONAL: Name column containing minimum m/z data values. supplied, overlap-overlap matching. Generally mzmin mzmax values generated peak picking. provided, mz value annotated within range theoretical mz +- error. mzmax_column OPTIONAL: Name column containing maximum m/z data values. supplied, overlap-overlap matching. Generally mzmin mzmax values generated peak picking.provided, mz value annotated within range theoretical mz +- error. pred_table Table generated previously glycoPredict. MUST LONG FORMAT - select format='long' running prediction. param glycoPredictParam object generation table theoretical mz values annotation. collapse Logical. TRUE, annotations 'collapsed' multiple annotations one mz row, comma separated (nrow output case equal nrow input data). FALSE (default), possible rows input dataframe repeated different annotations. information annotations detailed case. Collapsing can also done afterwards output using glycoAnnotationsCollapse. collapse_columns Columns pasted together collapsing. needed collapse=TRUE non-default columns wanted - default molecule name ion. prediction table provided pred_table instead param, column names required. error Numeric value - error used create window matching. mz values matched theoretical mzs +- error. error_units Units error - can 'ppm' 'Da'","code":""},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate m/z values with glycan compositions based on theoretical values — glycoAnnotate","text":"","code":"#with prediction parameters gpp <- glycoPredictParam(dp = c(1, 8), modifications = \"deoxy\", polarity = \"pos\", naming = \"IUPAC\") annotated_data <- glycoAnnotate(data = data, param = gpp, error = 1.5, units = 'ppm', collapse = T) #> Error in glycoAnnotate(data = data, param = gpp, error = 1.5, units = \"ppm\",     collapse = T): unused argument (units = \"ppm\")  #with prediction table gpp <- glycoPredictParam(dp = c(1, 8), modifications = \"deoxy\", polarity = \"pos\",  naming = \"IUPAC\") pred_table <- glycoPredict(param = gpp) #> Error: Tools for managing Python virtual environments are not installed. #>  #> Install venv with: #> $ sudo apt-get install python3-venv #>  annotated_data <- glycoAnnotate(data = data, pred_table = pred_table, error = 1.5, units = 'ppm', collapse = T, collapse_columns = c(\"IUPAC name\", \"ion\")) #> Error in glycoAnnotate(data = data, pred_table = pred_table, error = 1.5,     units = \"ppm\", collapse = T, collapse_columns = c(\"IUPAC name\",         \"ion\")): unused argument (units = \"ppm\")"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotationsCollapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse annotated m/z values to have one row per peak/feature — glycoAnnotationsCollapse","title":"Collapse annotated m/z values to have one row per peak/feature — glycoAnnotationsCollapse","text":"glycoAnnotationsCollapse() collapses output glycoAnnotate case multiple annotations per peak feature one row per peak/feature multiple annotations comma-separated.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotationsCollapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse annotated m/z values to have one row per peak/feature — glycoAnnotationsCollapse","text":"","code":"glycoAnnotationsCollapse(annotated_data, collapse_columns, noncollapse_columns)"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotationsCollapse.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Collapse annotated m/z values to have one row per peak/feature — glycoAnnotationsCollapse","text":"annotated_data Dataframe annotated glycoAnnotate collapsed multiple annotations per peak/feature. collapse_columns Names columns pasted together collapsing. Suggested molecule name ion. noncollapse_columns Names columns uniquely identify peaks retained collapsing - generally column names input dataframe annotation.","code":""},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoAnnotationsCollapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse annotated m/z values to have one row per peak/feature — glycoAnnotationsCollapse","text":"","code":"#annotate dataframe gpp <- glycoPredictParam(dp = c(1, 8), modifications = \"deoxy\", polarity = \"pos\", naming = \"IUPAC\") annotated_data <- glycoAnnotate(data = data, param = gpp, error = 1.5, units = 'ppm', collapse = F) #> Error in glycoAnnotate(data = data, param = gpp, error = 1.5, units = \"ppm\",     collapse = F): unused argument (units = \"ppm\")  #collapse multiple annotations annotated_data_collapsed <- glycoAnnotationsCollapse(annotated_data = annotated_data, collapse_columns = c('IUPAC name', 'ion'), noncollapse_columns = c('mz', 'rt', 'sampleA', 'sampleB')) #> Error in eval(expr, envir, enclos): object 'annotated_data' not found"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoMS2Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"MS/MS Spectra Extraction from annotated features — glycoMS2Extract","title":"MS/MS Spectra Extraction from annotated features — glycoMS2Extract","text":"function extracts MS/MS spectra associated features annotated glycoAnnotate function.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoMS2Extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MS/MS Spectra Extraction from annotated features — glycoMS2Extract","text":"","code":"glycoMS2Extract(data_ms2, data_features, annotations)"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoMS2Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MS/MS Spectra Extraction from annotated features — glycoMS2Extract","text":"data_ms2 MSnbase::MSnExp(), MSnbase::OnDiskMSnExp() xcms::XCMSnExp() object MS/MS spectra. data_features xcms::XCMSnExp() MS1 features defined XCMS processing annotated glycoAnnotate. annotations Output glycoAnnotate. needs data.frame numerical columns named \"mz\" \"rt\" (mz columns contains m/z features, annotations!).","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoMS2Extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MS/MS Spectra Extraction from annotated features — glycoMS2Extract","text":"returns MSpectra object msLevel=2 spectra whose precursors features annotated glycoAnnotate function.","code":""},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict masses and m/z values of theoretical glycans — glycoPredict","title":"Predict masses and m/z values of theoretical glycans — glycoPredict","text":"glycoPredict() predicts possible glycan within constraints set glycoPredictParam object.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict masses and m/z values of theoretical glycans — glycoPredict","text":"","code":"glycoPredict(param)"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict masses and m/z values of theoretical glycans — glycoPredict","text":"param glycoPredictParam object. See glycoPredictParam","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict masses and m/z values of theoretical glycans — glycoPredict","text":"glycoPredict() used predict masses mass charge ratios theoretically possible glycans within set constraining parameters (defined glycoPredictParam object). package written annotation mass spec data (especially LC-MS) used purposes either ionisation mode wide scan ranges can given. function works sourcing python file using function encoded python script.","code":""},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict masses and m/z values of theoretical glycans — glycoPredict","text":"","code":"gpp <- glycoPredictParam() gpp@dp <- c(1,7) gpp@polarity <- 'neg' gpp@scan_range <- c(150, 1300) gpp@modifications <- c('sulphate', 'carboxylicacid') gpp@double_sulphate <- TRUE predicted.df <- glycoPredict(param = gpp) #> Error: Tools for managing Python virtual environments are not installed. #>  #> Install venv with: #> $ sudo apt-get install python3-venv #>"},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredictParam-class.html","id":null,"dir":"Reference","previous_headings":"","what":"glycoPredictParam class — glycoPredictParam-class","title":"glycoPredictParam class — glycoPredictParam-class","text":"S4 class contains parameters glycoPredict() function.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredictParam-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"glycoPredictParam class — glycoPredictParam-class","text":"glycoPredict() used predict masses mass charge ratios theoretically possible glycans within set constraining parameters (defined glycoPredictParam object). package written annotation mass spec data (especially LC-MS) used purposes either ionisation mode wide scan ranges can given. function works sourcing python file using function encoded python script.","code":""},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredictParam-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"glycoPredictParam class — glycoPredictParam-class","text":"dp Degree polymerisation range. must numeric vector length 2. Default: c(1,6). polarity Ionisation mode used. Accepts 'pos' 'neg' (default). scan_range Scan range used MS. must numeric vector length 2. Default: c(175, 1400). pent_option Logical. pentose monomers included? Default: FALSE. modifications Modifications considered. combination 'carboxylicacid', 'sialicacid', 'phosphate', 'deoxy', 'nacetyl', 'omethyl', 'anhydrobridge', 'oacetyl', 'unsaturated', 'alditol', 'amino', 'dehydrated', 'sulphate', 'aminopentyllinker' '' 'none' (default) nmod_max Maximum number modifications per monomer, calculated number modifications number monomers (default 1). take account unsaturated, alditol dehydrated. double_sulphate Logical. Can monomers double-sulphated. TRUE, nmod_max needs value least 2. label sugars labelled reductive amination? Current supported labels : \"none\", \"procainamide\",\"2-aminobenzoic acid\", \"2-aminobenzamide\", \"1-phenyl-3-methyl-5-pyrazolone\". ion_type Ionisation type. Currently accepted ESI MALDI. Impacts ions. naming Notation molecule names. Uses commonly accepted abbreviations. Possibilities: 'IUPAC' (default), 'Oxford', 'GlycoCT' glycan_linkage Option implement filters O- N-glycans. Possibilities: 'none' (default), 'nglycan' 'oglycan'. modification_limits Option implement user created filters. Must named list, names modifications values limits.","code":""},{"path":[]},{"path":"https://margotbligh.github.io/GlycoAnnotateR/reference/glycoPredictParam-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"glycoPredictParam class — glycoPredictParam-class","text":"","code":"gpp <- glycoPredictParam() gpp@dp <- c(1,7) gpp@polarity <- 'neg' gpp@scan_range <- c(150, 1300) gpp@modifications <- c('sulphate', 'carboxylicacid') gpp@double_sulphate <- TRUE predicted.df <- glycoPredict(param = gpp) #> Error: Tools for managing Python virtual environments are not installed. #>  #> Install venv with: #> $ sudo apt-get install python3-venv #>"}]
